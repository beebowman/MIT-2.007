//Notes by Bo Bowman: 
// Remember to turn ON the power for the robot, so that the photoresistor mechnism will work!!! 
//Download LearnThruTech iPhone app to use this, and connect to it via bluetooth on the app. 
//Pull out the bluetooth module while you're uploading b/c they both use the same port 
//Conne.t left wheel to D20
//Connect right wheel to D30 
//run the automatic code and then run this bluetooth code after.

//modified code to work with a robot that turns with the front motor (caster wheel) and drives with the back motor (two back weels) 

//      Servo_Test_2007:
//      ----------------
//          - reads data from Bluetooth Module (HC-05) connected to serial port
//          - expects to receive characters: (BT RC Car app)
//                                             "F" = Forward
//                                             "B" = Backward
//                                             "R" = Right Turn
//                                             "L" = Left Turn
//                                             "S" = Stop
//
//
//
//          - modified for compatability with HM-10 and  LearnThruTech RC Car app 
//
// Bluetooth Module HC-05:  Standard Bluetooth - SPP (Serial Port) Protocol
//                          (requires "Pairing" with Host Device (PIN = 1234)
//                          can connect to Windows PC - Bluetooth RC Car.exe (VB application)
//                          can connect to Android phone - Car Bluetooth RC or Bluetooth RC Controller apps
//
// Bluetooth Module HM-10:  Bluetooth 4.0 Low Energy Module (BTLE)
//                          No "Pairing" required - selected through each application
//                          can connect to Android or iPhone
//                          uses LearnThruTech RC Car Controller application
//                          (available in App Store or via Goggle Play)
//

//**********************************************************************************************
//                                             LIBRARIES
//**********************************************************************************************
#include <Servo.h>

//**********************************************************************************************
//                                        CONSTANTS AND VARIABLES
//**********************************************************************************************
#define SERVO1 2        //define a pin for servo1, the turning servo
#define SERVO2 3        //define a pin for servo2, the back wheel driving servo
#define SERVO3 4        // define a pin for servo3, the servo that turns the robot horns sideways versus upwards 
#define SERVO4 5        // define a pin for servo4, the servo that pushes the RAM (pusher) forwards on the robot to pull the streetlamp on the gameboard 

const int neutral = 1500; //stop 
const int forward = 2000; 
const int backward = 1000;
const int forwardslower = 1750; 
const int backwardslower = 1250; 

int Servo_Value1 = 0;
int Servo_Value2 = 0;
int Servo_Value3 = 0;
int Servo_Value4 = 0;

char t;
char old_t;

int NumButtonsPressed = 0;

///**********************************************************************************************
//                                              OBJECTS
//**********************************************************************************************
Servo DriveServo1;        // initialize  servo that turns the front of the robot 
Servo DriveServo2;        // initialize  servo that drives the back wheels
Servo DriveServo3;        // initialize  servo that turns the horns of the robot 
Servo DriveServo4;        // initialize  servo that pushes the RAM pusher forward on the robot 

///**********************************************************************************************
//                                              Potentiometer  
//**********************************************************************************************
// These constants won't change. They're used to give names to the pins used:
//const int analogInPin = A7; // Analog input pin that the potentiometer is attached to
//const int analogOutPin = 9; // Analog output pin that the LED is attached to
//int sensorValue = 0; // value read from the pot
//int outputValue = 0; // value output to the PWM (analog out)

//Connect photoresistor to GND, and the other side of the photoresistor is split/connected (from the middle) to both to pin A7 and also to a 200 ohm resistor. The 200 ohm resistor is attached to P.5V of the board. 
// A photoresistor needs to go both to GND and to the pin and to 5V, with a resistor between the photoresistor and the 5V. When light shines, this decreases the resistance
//of the resistor to 0 Ohms, and when there's darkness, the resistor goes to some other high value. Play around and use a resistor that's about the same value (with multimeter measurement)
//as the photoresistor when the photoresistor has light shined on it. 

//**********************************************************************************************
//                                         Function: setup()
//**********************************************************************************************
void setup()
{ 
  Serial.begin(9600);

  // set pin for the built-in LED 
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode (SERVO1, OUTPUT); // want servo pin to be an output
  DriveServo1.attach(SERVO1); // attach pin to the servo 
  DriveServo1.writeMicroseconds(neutral);  // set servo to mid-point 

  pinMode (SERVO2, OUTPUT); // want servo pin to be an output
  DriveServo2.attach(SERVO2); // attach pin to the servo 
  DriveServo2.writeMicroseconds(neutral);  // set servo to mid-point

  pinMode (SERVO3, OUTPUT); // want servo pin to be an output
  DriveServo3.attach(SERVO3); // attach pin to the servo 
  DriveServo3.writeMicroseconds(neutral);  // set servo to mid-point

  pinMode (SERVO4, OUTPUT); // want servo pin to be an output
  DriveServo4.attach(SERVO4); // attach pin to the servo 
  DriveServo4.writeMicroseconds(neutral);  // set servo to mid-point
}
 

//**********************************************************************************************
//                                         Function: loop()
//**********************************************************************************************
void loop()
{

    //Execute automatic code that moves the robot forward upon light activation via the potentiometer sensor and a flashlight 
    // read the analog in value:
    //sensorValue = analogRead(analogInPin);
    //Serial.println(sensorValue);

//    if (sensorValue < 400) // this number should be adjusted for your environment!! 
//   {
//
//    //move the robot forward
//    MoveForward();
//    delay(500); 
//
//    //Turn the robot to the right  
//    RightTurn();
//    delay(50); 
//    StopTurning(); 
//
//    //continue moving forward 
//    delay(500);
//
//    StopMoving();
//    
//    }
    
    //Check the bluetooth to read commands from the LearnThruTech iPhone app to control the robot 
    Check_Bluetooth();  
}

//**********************************************************************************************
//                                    Function: Check_Bluetooth()
//**********************************************************************************************
void Check_Bluetooth()
{
  if (Serial.available())
  {
    t = Serial.read();
    Serial.println(t);
  }
  else                                        // for BTLE app
  {                                           // for BTLE app
    t = 'N';                                  // for BTLE app
    if (old_t != 'N') Serial.println(t);      // for BTLE app
  }                                           // for BTLE app
 
  if (t == 'F')
  {            //move forward(all motors rotate in forward direction)
    if (old_t != t) 
    {
      MoveForward();
      NumButtonsPressed = NumButtonsPressed + 1;
    }
    old_t = t;
  }
 
else if(t == 'B')
  {      //move reverse (all motors rotate in reverse direction)
    if (old_t != t)
    {
      MoveBackward();
      NumButtonsPressed = NumButtonsPressed + 1;
    }
    old_t = t;
  }
 
else if(t == 'L')
  {      //turn right (left side motors rotate in forward direction, right side motors doesn't rotate)
    if (old_t != t)
    {
      LeftTurn();
      NumButtonsPressed = NumButtonsPressed + 1;
    }
    old_t = t;
  }
 
else if(t == 'R')
  {      //turn left (right side motors rotate in forward direction, left side motors doesn't rotate)
    if (old_t != t) 
    {
      RightTurn();
      NumButtonsPressed = NumButtonsPressed + 1;
    }
    old_t = t;
  }

else if(t == 'W')
  {      //push the RAM pusher forward on the robot 
    if (old_t != t) 
    {
      Push(); //push
      delay(1400);
      StopMovingRAM();
      NumButtonsPressed = NumButtonsPressed + 1;
    }
    old_t = t;
  }

else if(t == 'w')
  {      //push the RAM pusher forward on the robot 
    if (old_t != t) 
    {
     StopMovingRAM(); //stop the RAM pusher 
      NumButtonsPressed = NumButtonsPressed - 1;
    }
    old_t = t;
  }

else if(t == 'U')
  {      //pull the RAM pusher backwards on the robot 
    if (old_t != t) 
    {
      Pull();
      delay(1400);
      StopMovingRAM();
      NumButtonsPressed = NumButtonsPressed + 1;
    }
    old_t = t;
  }

  
else if(t == 'u')
  {      //stop the RAM pusher 
    if (old_t != t) 
    {
      StopMovingRAM(); //stop the RAM pusher 
      NumButtonsPressed = NumButtonsPressed - 1;
    }
    old_t = t;
  }

else if(t == 'V')
  {      //turn horns on the robot outwards
    if (old_t != t) 
    {
      TurnHornsInward();
      delay(1301);
      StopMovingHorns();
      NumButtonsPressed = NumButtonsPressed - 1;
    }
    old_t = t;
  }

else if(t == 'v')
  {      //turn horns on the robot inwards (when you press the horn button) 
    if (old_t != t) 
    {
      TurnHornsOutward();
      delay(1300);
      StopMovingHorns();
      NumButtonsPressed = NumButtonsPressed + 1;
    }
    old_t = t;
  }

else if(t == 'S')
  {      //STOP (all motors stop)
    NumButtonsPressed = NumButtonsPressed - 1;              // for BTLE app
    if (NumButtonsPressed < 0) NumButtonsPressed = 0;       // for BTLE app
    if (NumButtonsPressed == 0)                             // for BTLE app
    {
      StopMoving();      
      old_t = t;                        
    }
  }  

else if(t == 'N')                         // for BTLE app
  {                                       // for BTLE app
    // nothing received
  }                                       // for BTLE app
  
delay(10);
}

//**********************************************************************************************
//                                      Function: StopMoving()
//**********************************************************************************************
void StopMoving()
{
  //put code to stop motors here
  Serial.println("Stop");
  DriveServo1.writeMicroseconds(neutral);          // set servo to position 
  DriveServo2.writeMicroseconds(neutral);          // set servo to position
  DriveServo3.writeMicroseconds(neutral);          // set servo to position
  DriveServo4.writeMicroseconds(neutral);          // set servo to position
}
//**********************************************************************************************
//                                      Function: StopMovingRAM()
//**********************************************************************************************
void StopMovingRAM()
{
  //put code to stop motors here
  Serial.println("Stop RAM pusher");
  DriveServo4.writeMicroseconds(neutral);          // set servo to position
}

//**********************************************************************************************
//                                      Function: StopMovingHorns()
//**********************************************************************************************
void StopMovingHorns()
{
  //put code to stop motors here
  Serial.println("Stop moving horns");
  DriveServo3.writeMicroseconds(neutral);          // set servo to position
}
//**********************************************************************************************
//                                      Function: StopMovingTurner()
//**********************************************************************************************
void StopMovingRAM()
{
  //put code to stop motors here
  Serial.println("Stop RAM pusher");
  DriveServo1.writeMicroseconds(neutral);          // set servo to position
}
//**********************************************************************************************
//                                      Function: RightTurn()
//**********************************************************************************************
void RightTurn()
{
  //put code to turn Right here
  Serial.println("Right");
  DriveServo1.writeMicroseconds(backwardslower);          // set servo to position (counter-clockwise/backwards turns the robot right) 
  //DriveServo2.writeMicroseconds(backwardslower);          // set servo to position
  // to turn slower, change backward to backward/2 
}

//**********************************************************************************************
//                                      Function: LeftTurn()
//**********************************************************************************************
void LeftTurn()
{
  //put code to turn Left here 
  Serial.println("Left");
  DriveServo1.writeMicroseconds(forwardslower);          // set servo to position (clockwise/forwards turns the robot left) 
  //DriveServo2.writeMicroseconds(forwardslower);          // set servo to position
}

//**********************************************************************************************
//                                      Function: StopTurning()
//**********************************************************************************************
void StopTurning()
{
  //put code to stop turning the robot 
  Serial.println("Stop Turning");
  DriveServo1.writeMicroseconds(neutral);          // set servo to position (clockwise/forwards turns the robot left) 
}

//**********************************************************************************************
//                                      Function: MoveForward()
//**********************************************************************************************
void MoveForward()
{
  //put code to move forward here
  Serial.println("Forward");
  //DriveServo1.writeMicroseconds(forward);          // set servo to position (commented this out b/c front wheel turns, doesn't drive) 
  DriveServo2.writeMicroseconds(forward);          // set servo to position (counter-clockwise for back wheel motor moves robot forward) 
          
           //this was originally (forward) for the above line of code. Changed it to (backward) since that drives the robot forward. 
}

//**********************************************************************************************
//                                      Function: MoveBackward()
//**********************************************************************************************
void MoveBackward()
{
  //put code to move Backward here
  Serial.println("Backward");
  //DriveServo1.writeMicroseconds(backward);          // set servo to position
  DriveServo2.writeMicroseconds(backward);          // set servo to position (clockwise (forward) motor direction for back wheels moves robot backward) 
}
//**********************************************************************************************
//                                      Function: TurnHornsOutward()
//**********************************************************************************************
void TurnHornsOutward()
{
  //put code to move Backward here
  Serial.println("Turn Horns");
  DriveServo3.writeMicroseconds(forward);          // set servo to position (clockwise (forward) motor direction for back wheels moves robot backward) 
}
//**********************************************************************************************
//                                      Function: TurnHornsInward()
//**********************************************************************************************
void TurnHornsInward() 
{
  //put code to move Backward here
  Serial.println("Turn Horns");
  DriveServo3.writeMicroseconds(backward);          // set servo to position (clockwise (forward) motor direction for back wheels moves robot backward) 
}
//**********************************************************************************************
//                                      Function: Push()
//**********************************************************************************************
void Push()
{
  //put code to move Backward here
  Serial.println("Push Streetlamp");
  DriveServo4.writeMicroseconds(forward);          // set servo to position (clockwise (forward) motor direction for back wheels moves robot backward) 
}

//**********************************************************************************************
//                                      Function: Pull()
//**********************************************************************************************
void Pull()
{
  //put code to move Backward here
  Serial.println("Push Streetlamp");
  DriveServo4.writeMicroseconds(backward);          // set servo to position (clockwise (forward) motor direction for back wheels moves robot backward) 
}
